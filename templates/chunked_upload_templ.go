// Code generated by templ - DO NOT EDIT.

// templ: version: v0.3.833
package templates

//lint:file-ignore SA4006 This context is only used if a nested component is present.

import "github.com/a-h/templ"
import templruntime "github.com/a-h/templ/runtime"

import "github.com/marianozunino/drop/internal/config"

func ChunkedUploadPage(config config.Config) templ.Component {
	return templruntime.GeneratedTemplate(func(templ_7745c5c3_Input templruntime.GeneratedComponentInput) (templ_7745c5c3_Err error) {
		templ_7745c5c3_W, ctx := templ_7745c5c3_Input.Writer, templ_7745c5c3_Input.Context
		if templ_7745c5c3_CtxErr := ctx.Err(); templ_7745c5c3_CtxErr != nil {
			return templ_7745c5c3_CtxErr
		}
		templ_7745c5c3_Buffer, templ_7745c5c3_IsBuffer := templruntime.GetBuffer(templ_7745c5c3_W)
		if !templ_7745c5c3_IsBuffer {
			defer func() {
				templ_7745c5c3_BufErr := templruntime.ReleaseBuffer(templ_7745c5c3_Buffer)
				if templ_7745c5c3_Err == nil {
					templ_7745c5c3_Err = templ_7745c5c3_BufErr
				}
			}()
		}
		ctx = templ.InitializeContext(ctx)
		templ_7745c5c3_Var1 := templ.GetChildren(ctx)
		if templ_7745c5c3_Var1 == nil {
			templ_7745c5c3_Var1 = templ.NopComponent
		}
		ctx = templ.ClearChildren(ctx)
		templ_7745c5c3_Err = templruntime.WriteString(templ_7745c5c3_Buffer, 1, "<!doctype html><html lang=\"en\"><head><meta charset=\"UTF-8\"><meta name=\"viewport\" content=\"width=device-width, initial-scale=1.0\"><title>Chunked Upload - Drop</title><style>\n\t\t\tpre {\n\t\t\t\twhite-space: pre;\n\t\t\t\tfont-family: monospace;\n\t\t\t\tline-height: 1.2;\n\t\t\t\toverflow-x: auto;\n\t\t\t}\n\t\t\t.upload-area {\n\t\t\t\tborder: 2px dashed #ccc;\n\t\t\t\tpadding: 20px;\n\t\t\t\ttext-align: center;\n\t\t\t\tmargin: 20px 0;\n\t\t\t\tcursor: pointer;\n\t\t\t\tposition: relative;\n\t\t\t}\n\t\t\t.upload-area:hover {\n\t\t\t\tbackground-color: #f5f5f5;\n\t\t\t}\n\t\t\t.upload-area.dragover {\n\t\t\t\tbackground-color: #e0f0ff;\n\t\t\t\tborder-color: #0066cc;\n\t\t\t}\n\t\t\t.progress {\n\t\t\t\tmargin: 20px 0;\n\t\t\t\tdisplay: none;\n\t\t\t}\n\t\t\t.progress-bar {\n\t\t\t\twidth: 100%;\n\t\t\t\theight: 20px;\n\t\t\t\tbackground-color: #f0f0f0;\n\t\t\t\tborder: 1px solid #ccc;\n\t\t\t}\n\t\t\t.progress-fill {\n\t\t\t\theight: 100%;\n\t\t\t\tbackground-color: #0066cc;\n\t\t\t\twidth: 0%;\n\t\t\t\ttransition: width 0.3s;\n\t\t\t}\n\t\t\t.status {\n\t\t\t\tmargin: 10px 0;\n\t\t\t\tpadding: 10px;\n\t\t\t\tborder-radius: 4px;\n\t\t\t\tdisplay: none;\n\t\t\t}\n\t\t\t.status.success {\n\t\t\t\tbackground-color: #d4edda;\n\t\t\t\tborder: 1px solid #c3e6cb;\n\t\t\t\tcolor: #155724;\n\t\t\t}\n\t\t\t.status.error {\n\t\t\t\tbackground-color: #f8d7da;\n\t\t\t\tborder: 1px solid #f5c6cb;\n\t\t\t\tcolor: #721c24;\n\t\t\t}\n\t\t\t.status.info {\n\t\t\t\tbackground-color: #d1ecf1;\n\t\t\t\tborder: 1px solid #bee5eb;\n\t\t\t\tcolor: #0c5460;\n\t\t\t}\n\t\t\t.result {\n\t\t\t\tmargin: 20px 0;\n\t\t\t\tpadding: 15px;\n\t\t\t\tbackground-color: #f8f9fa;\n\t\t\t\tborder: 1px solid #e9ecef;\n\t\t\t\tdisplay: none;\n\t\t\t}\n\t\t\t.file-url {\n\t\t\t\tfont-family: monospace;\n\t\t\t\tbackground-color: white;\n\t\t\t\tpadding: 10px;\n\t\t\t\tborder: 1px solid #ddd;\n\t\t\t\tword-break: break-all;\n\t\t\t}\n\t\t\tbutton {\n\t\t\t\tbackground-color: #0066cc;\n\t\t\t\tcolor: white;\n\t\t\t\tborder: none;\n\t\t\t\tpadding: 8px 16px;\n\t\t\t\tcursor: pointer;\n\t\t\t\tmargin: 5px;\n\t\t\t}\n\t\t\tbutton:hover {\n\t\t\t\tbackground-color: #0052a3;\n\t\t\t}\n\t\t\t.hidden {\n\t\t\t\tdisplay: none;\n\t\t\t\tposition: absolute;\n\t\t\t\tleft: -9999px;\n\t\t\t}\n\t\t</style></head><body><h1>Chunked Upload</h1><p>Upload large files with resume capability and progress tracking.</p><div class=\"upload-area\" id=\"uploadArea\"><p><strong>Drop a file here or click to select</strong></p><input type=\"file\" id=\"fileInput\" class=\"hidden\"></div><div class=\"progress\" id=\"progress\"><p><strong>Uploading: <span id=\"fileName\"></span></strong></p><div class=\"progress-bar\"><div class=\"progress-fill\" id=\"progressFill\"></div></div><p><span id=\"progressText\">0%</span> (<span id=\"uploadedSize\">0 B</span> / <span id=\"totalSize\">0 B</span>)</p></div><div class=\"status\" id=\"status\"></div><div class=\"result\" id=\"result\"><h3>✅ Upload Complete!</h3><p>Your file is available at:</p><div class=\"file-url\" id=\"fileUrl\"></div><button id=\"copyBtn\">Copy URL</button><div id=\"md5Info\" style=\"margin-top: 15px; padding: 10px; background-color: #f8f9fa; border: 1px solid #e9ecef; border-radius: 4px; display: none;\"><p><strong>MD5 Hash:</strong> <span id=\"md5Hash\" style=\"font-family: monospace; background-color: white; padding: 5px; border: 1px solid #ddd;\"></span></p><p style=\"font-size: 0.9em; color: #666; margin-top: 5px;\">Use this hash to verify file integrity or detect duplicates.</p></div></div><p><a href=\"/\">← Back to Home</a></p><script>\n\t\t\tclass SimpleChunkedUploader {\n\t\t\t\tconstructor() {\n\t\t\t\t\tthis.chunkSize = 4 * 1024 * 1024; // 4MB chunks (matching server config)\n\t\t\t\t\tthis.uploadId = null;\n\t\t\t\t\tthis.totalChunks = 0;\n\t\t\t\t\tthis.uploadedChunks = new Set();\n\t\t\t\t\tthis.currentFile = null;\n\t\t\t\t\tthis.baseUrl = window.location.origin;\n\t\t\t\t\t\n\t\t\t\t\tthis.initializeElements();\n\t\t\t\t\tthis.bindEvents();\n\t\t\t\t}\n\n\t\t\t\tinitializeElements() {\n\t\t\t\t\tthis.uploadArea = document.getElementById('uploadArea');\n\t\t\t\t\tthis.fileInput = document.getElementById('fileInput');\n\t\t\t\t\tthis.progress = document.getElementById('progress');\n\t\t\t\t\tthis.fileName = document.getElementById('fileName');\n\t\t\t\t\tthis.progressFill = document.getElementById('progressFill');\n\t\t\t\t\tthis.progressText = document.getElementById('progressText');\n\t\t\t\t\tthis.uploadedSize = document.getElementById('uploadedSize');\n\t\t\t\t\tthis.totalSize = document.getElementById('totalSize');\n\t\t\t\t\tthis.status = document.getElementById('status');\n\t\t\t\t\tthis.result = document.getElementById('result');\n\t\t\t\t\tthis.fileUrl = document.getElementById('fileUrl');\n\t\t\t\t\tthis.copyBtn = document.getElementById('copyBtn');\n\t\t\t\t\tthis.md5Info = document.getElementById('md5Info');\n\t\t\t\t\tthis.md5Hash = document.getElementById('md5Hash');\n\t\t\t\t}\n\n\t\t\t\tbindEvents() {\n\t\t\t\t\t\t\t\t\t// Drag and drop events\n\t\t\t\tthis.uploadArea.addEventListener('dragover', (e) => {\n\t\t\t\t\te.preventDefault();\n\t\t\t\t\tthis.uploadArea.classList.add('dragover');\n\t\t\t\t\tconsole.log('Drag over detected');\n\t\t\t\t});\n\n\t\t\t\tthis.uploadArea.addEventListener('dragleave', (e) => {\n\t\t\t\t\te.preventDefault();\n\t\t\t\t\tthis.uploadArea.classList.remove('dragover');\n\t\t\t\t\tconsole.log('Drag leave detected');\n\t\t\t\t});\n\n\t\t\t\tthis.uploadArea.addEventListener('drop', (e) => {\n\t\t\t\t\te.preventDefault();\n\t\t\t\t\tthis.uploadArea.classList.remove('dragover');\n\t\t\t\t\tconst files = e.dataTransfer.files;\n\t\t\t\t\tconsole.log('Drop detected with files:', files);\n\t\t\t\t\tif (files.length > 0) {\n\t\t\t\t\t\tthis.handleFile(files[0]);\n\t\t\t\t\t}\n\t\t\t\t});\n\n\t\t\t\t\t\t\t\t\t// Click to select file\n\t\t\t\tthis.uploadArea.addEventListener('click', (e) => {\n\t\t\t\t\t// Prevent triggering if clicking on the file input itself\n\t\t\t\t\tif (e.target !== this.fileInput) {\n\t\t\t\t\t\tthis.fileInput.click();\n\t\t\t\t\t}\n\t\t\t\t});\n\n\t\t\t\t\t\t\t\t\t// File input change\n\t\t\t\tthis.fileInput.addEventListener('change', (e) => {\n\t\t\t\t\tconsole.log('File input changed:', e.target.files);\n\t\t\t\t\tif (e.target.files.length > 0) {\n\t\t\t\t\t\tthis.handleFile(e.target.files[0]);\n\t\t\t\t\t}\n\t\t\t\t});\n\n\t\t\t\t\t// Copy button\n\t\t\t\t\tthis.copyBtn.addEventListener('click', () => {\n\t\t\t\t\t\tthis.copyToClipboard(this.fileUrl.textContent);\n\t\t\t\t\t});\n\t\t\t\t}\n\n\t\t\t\tasync handleFile(file) {\n\t\t\t\t\tthis.currentFile = file;\n\t\t\t\t\tthis.resetUI();\n\t\t\t\t\tthis.showProgress();\n\t\t\t\t\tthis.updateFileInfo(file);\n\n\t\t\t\t\ttry {\n\t\t\t\t\t\tawait this.initializeUpload(file);\n\t\t\t\t\t\tawait this.uploadChunks(file);\n\t\t\t\t\t} catch (error) {\n\t\t\t\t\t\tthis.showStatus(`Upload failed: ${error.message}`, 'error');\n\t\t\t\t\t}\n\t\t\t\t}\n\n\t\t\t\tasync initializeUpload(file) {\n\t\t\t\t\tconst formData = new FormData();\n\t\t\t\t\tformData.append('filename', file.name);\n\t\t\t\t\tformData.append('size', file.size);\n\t\t\t\t\tformData.append('chunk_size', this.chunkSize);\n\n\t\t\t\t\tconst response = await fetch(`${this.baseUrl}/upload/init`, {\n\t\t\t\t\t\tmethod: 'POST',\n\t\t\t\t\t\tbody: formData\n\t\t\t\t\t});\n\n\t\t\t\t\tif (!response.ok) {\n\t\t\t\t\t\tconst error = await response.json();\n\t\t\t\t\t\tthrow new Error(error.error || 'Failed to initialize upload');\n\t\t\t\t\t}\n\n\t\t\t\t\tconst data = await response.json();\n\t\t\t\t\tthis.uploadId = data.upload_id;\n\t\t\t\t\tthis.totalChunks = data.total_chunks;\n\t\t\t\t\tthis.uploadedChunks = new Set(data.uploaded_chunks || []);\n\n\t\t\t\t\tthis.showStatus(`Upload initialized. Total chunks: ${this.totalChunks}`, 'info');\n\t\t\t\t}\n\n\t\t\t\tasync uploadChunks(file) {\n\t\t\t\t\tfor (let i = 0; i < this.totalChunks; i++) {\n\t\t\t\t\t\t// Skip already uploaded chunks\n\t\t\t\t\t\tif (this.uploadedChunks.has(i)) {\n\t\t\t\t\t\t\tthis.updateProgress();\n\t\t\t\t\t\t\tcontinue;\n\t\t\t\t\t\t}\n\n\t\t\t\t\t\tconst start = i * this.chunkSize;\n\t\t\t\t\t\tconst end = Math.min(start + this.chunkSize, file.size);\n\t\t\t\t\t\tconst chunk = file.slice(start, end);\n\n\t\t\t\t\t\tawait this.uploadChunk(i, chunk);\n\t\t\t\t\t\tthis.uploadedChunks.add(i);\n\t\t\t\t\t\tthis.updateProgress();\n\t\t\t\t\t}\n\n\t\t\t\t\t// Upload should be complete now\n\t\t\t\t\tthis.showStatus('Upload completed successfully!', 'success');\n\t\t\t\t\tthis.showResult();\n\t\t\t\t}\n\n\t\t\t\tasync uploadChunk(chunkIndex, chunk) {\n\t\t\t\t\tconst formData = new FormData();\n\t\t\t\t\tformData.append('chunk', chunk);\n\n\t\t\t\t\tconst response = await fetch(`${this.baseUrl}/upload/chunk/${this.uploadId}/${chunkIndex}`, {\n\t\t\t\t\t\tmethod: 'POST',\n\t\t\t\t\t\tbody: formData\n\t\t\t\t\t});\n\n\t\t\t\t\tif (!response.ok) {\n\t\t\t\t\t\tconst error = await response.json();\n\t\t\t\t\t\tthrow new Error(error.error || `Failed to upload chunk ${chunkIndex}`);\n\t\t\t\t\t}\n\n\t\t\t\t\tconst data = await response.json();\n\t\t\t\t\t\n\t\t\t\t\t// Check if upload is complete\n\t\t\t\t\tif (data.progress === 100) {\n\t\t\t\t\t\tthis.fileUrl.textContent = data.file_url;\n\t\t\t\t\t\t// Display MD5 hash if available\n\t\t\t\t\t\tif (data.md5) {\n\t\t\t\t\t\t\tthis.md5Hash.textContent = data.md5;\n\t\t\t\t\t\t\tthis.md5Info.style.display = 'block';\n\t\t\t\t\t\t}\n\t\t\t\t\t\treturn;\n\t\t\t\t\t}\n\t\t\t\t}\n\n\t\t\t\tupdateProgress() {\n\t\t\t\t\tconst progress = Math.round((this.uploadedChunks.size / this.totalChunks) * 100);\n\t\t\t\t\tthis.progressText.textContent = `${progress}%`;\n\t\t\t\t\tthis.progressFill.style.width = `${progress}%`;\n\n\t\t\t\t\tconst uploadedBytes = this.uploadedChunks.size * this.chunkSize;\n\t\t\t\t\tthis.uploadedSize.textContent = this.formatBytes(uploadedBytes);\n\t\t\t\t}\n\n\t\t\t\tupdateFileInfo(file) {\n\t\t\t\t\tthis.fileName.textContent = file.name;\n\t\t\t\t\tthis.totalSize.textContent = this.formatBytes(file.size);\n\t\t\t\t}\n\n\t\t\t\tformatBytes(bytes) {\n\t\t\t\t\tif (bytes === 0) return '0 B';\n\t\t\t\t\tconst k = 1024;\n\t\t\t\t\tconst sizes = ['B', 'KB', 'MB', 'GB'];\n\t\t\t\t\tconst i = Math.floor(Math.log(bytes) / Math.log(k));\n\t\t\t\t\treturn parseFloat((bytes / Math.pow(k, i)).toFixed(2)) + ' ' + sizes[i];\n\t\t\t\t}\n\n\t\t\t\tshowProgress() {\n\t\t\t\t\tthis.progress.style.display = 'block';\n\t\t\t\t\tthis.result.style.display = 'none';\n\t\t\t\t}\n\n\t\t\t\tshowResult() {\n\t\t\t\t\tthis.progress.style.display = 'none';\n\t\t\t\t\tthis.result.style.display = 'block';\n\t\t\t\t}\n\n\t\t\t\tshowStatus(message, type) {\n\t\t\t\t\tthis.status.textContent = message;\n\t\t\t\t\tthis.status.className = `status ${type}`;\n\t\t\t\t\tthis.status.style.display = 'block';\n\t\t\t\t}\n\n\t\t\t\tresetUI() {\n\t\t\t\t\tthis.progress.style.display = 'none';\n\t\t\t\t\tthis.result.style.display = 'none';\n\t\t\t\t\tthis.status.style.display = 'none';\n\t\t\t\t\tthis.md5Info.style.display = 'none';\n\t\t\t\t\tthis.progressFill.style.width = '0%';\n\t\t\t\t\tthis.progressText.textContent = '0%';\n\t\t\t\t\tthis.uploadedSize.textContent = '0 B';\n\t\t\t\t\tthis.totalSize.textContent = '0 B';\n\t\t\t\t}\n\n\t\t\t\tasync copyToClipboard(text) {\n\t\t\t\t\ttry {\n\t\t\t\t\t\tawait navigator.clipboard.writeText(text);\n\t\t\t\t\t\tthis.copyBtn.textContent = 'Copied!';\n\t\t\t\t\t\tsetTimeout(() => {\n\t\t\t\t\t\t\tthis.copyBtn.textContent = 'Copy URL';\n\t\t\t\t\t\t}, 2000);\n\t\t\t\t\t} catch (err) {\n\t\t\t\t\t\t// Fallback for older browsers\n\t\t\t\t\t\tconst textArea = document.createElement('textarea');\n\t\t\t\t\t\ttextArea.value = text;\n\t\t\t\t\t\tdocument.body.appendChild(textArea);\n\t\t\t\t\t\ttextArea.select();\n\t\t\t\t\t\tdocument.execCommand('copy');\n\t\t\t\t\t\tdocument.body.removeChild(textArea);\n\t\t\t\t\t\t\n\t\t\t\t\t\tthis.copyBtn.textContent = 'Copied!';\n\t\t\t\t\t\tsetTimeout(() => {\n\t\t\t\t\t\t\tthis.copyBtn.textContent = 'Copy URL';\n\t\t\t\t\t\t}, 2000);\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t}\n\n\t\t\t// Initialize the uploader when the page loads\n\t\t\tdocument.addEventListener('DOMContentLoaded', () => {\n\t\t\t\tnew SimpleChunkedUploader();\n\t\t\t});\n\t\t</script></body></html>")
		if templ_7745c5c3_Err != nil {
			return templ_7745c5c3_Err
		}
		return nil
	})
}

var _ = templruntime.GeneratedTemplate
